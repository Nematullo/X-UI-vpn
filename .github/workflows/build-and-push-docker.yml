name: Build and Push Docker Image X-UI-NEO

on:
  push:
    branches: [ main ] # Триггер при пуше в ветку main

jobs:
  build-and-push-cert-generator:
    runs-on: self-hosted
    # if: false # <--- Раскомментируйте эту строку, чтобы пропустить job генерации сертификатов (например, если сертификаты уже сгенерированы и volume не нужно обновлять)
    steps:
      # Получаем код репозитория
      - name: Checkout repo
        uses: actions/checkout@v4
      # Логинимся в DockerHub для возможности пуша образа (если нужно)
      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      # Собираем образ генератора сертификатов
      - name: Build Cert Generator Image
        run: docker build -f cert-generator-project/Dockerfile.certgen -t cert-generator-image .
      # (Опционально) пушим образ генератора сертификатов в DockerHub
      - name: Push Cert Generator Image (опционально)
        run: |
          docker tag cert-generator-image ${{ secrets.DOCKERHUB_USERNAME }}/cert-generator-image:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/cert-generator-image:latest
      # Создаём именованный Docker volume для хранения сертификатов (если ещё не создан)
      - name: Create Docker Volume for Certs
        run: docker volume create certs_volume || true
      # Останавливаем и удаляем предыдущий контейнер генератора, если он был (чистый запуск)
      - name: Stop and remove existing cert-generator container (if any)
        run: |
          docker stop cert-generator-temp 2>/dev/null || true
          docker rm cert-generator-temp 2>/dev/null || true
      # Запускаем контейнер генератора сертификатов, чтобы сгенерировать новые сертификаты во volume
      - name: Run Cert Generator Container and Generate Certs
        run: docker run --name cert-generator-temp --rm -v certs_volume:/certs cert-generator-image

  build-push-run-x-ui:
    runs-on: self-hosted
    needs: [build-and-push-cert-generator]
    steps:
      # Получаем код репозитория
      - name: Checkout repo
        uses: actions/checkout@v4
      # Логинимся в DockerHub для возможности пуша образа
      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      # Собираем и пушим основной Docker-образ X-UI-NEO
      - name: Build and push Docker image X-UI-NEO
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/x-ui-neo:latest # Тег образа
      # Останавливаем и удаляем предыдущий контейнер X-UI-NEO, если он был запущен
      - name: Stop and remove existing X-UI-NEO container
        run: |
          docker stop x-ui-neo 2>/dev/null || true
          docker rm x-ui-neo 2>/dev/null || true
      # (Опционально) чистим старые образы X-UI-NEO, кроме latest
      - name: Clean up old X-UI-NEO images (optional, use with caution)
        run: |
          docker images "${{ secrets.DOCKERHUB_USERNAME }}/x-ui-neo" --format "{{.Repository}}:{{.Tag}}" | \
          grep -v latest | xargs -r docker rmi 2>/dev/null || true
      # Запускаем новый контейнер X-UI-NEO с монтированием volume сертификатов
      - name: Run new X-UI container
        run: |
          docker volume create xui_data_volume || true
          docker run -d \
            --name x-ui-neo \
            --restart unless-stopped \
            #-v xui_data_volume:/etc/x-ui/ \
            -v certs_volume:/certs \
            -p 2002:54321 \
            -p 2003-2025:2003-2025 \
            ${{ secrets.DOCKERHUB_USERNAME }}/x-ui-neo:latest